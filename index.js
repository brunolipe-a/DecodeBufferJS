const buffers = [{"data": [68, 119, 126, 116, 46, 164, 36, 22, 41, 209, 216, 221, 14, 207, 169, 27, 234, 83, 236, 229, 230, 239, 237, 230, 119, 72, 206, 216, 209, 152, 14, 36, 22, 207, 121, 79, 83, 69, 76, 5, 246, 255, 248, 148, 71, 251, 93, 79, 93, 226, 235, 232, 225, 227, 232, 231, 36, 22, 129, 89, 230, 239, 236, 229, 231, 236, 125, 64, 41, 63, 54, 127, 54, 63, 54, 53, 156, 174, 24, 180, 93, 36, 22, 27, 129, 200, 129, 136, 129, 136, 92, 188, 11, 53, 80, 239, 230, 229, 236, 238, 239, 36, 244, 158, 136, 25, 36, 22, 209, 92, 227, 234, 233, 224, 226, 228, 139, 227, 38, 32, 41, 96, 41, 32, 41, 32, 14, 75, 247, 129, 99, 36, 22, 24, 214, 208, 146, 148, 56, 241, 18, 80, 239, 230, 229, 236, 238, 229, 116, 75, 195, 213, 220, 149, 223, 201, 36, 22, 44, 20, 29, 84, 29, 20, 29, 20, 170, 68, 142, 101, 83, 236, 229, 230, 239, 237, 235, 132, 230, 18, 123, 36, 22, 78, 76, 232, 254, 247, 190, 244, 253, 247, 225, 177, 237, 71, 225, 85, 234, 227, 224, 233, 235, 224, 113, 37, 36, 22, 83, 9, 160, 84, 235, 226, 225, 232, 234, 236, 187, 11, 71, 65, 72, 1, 75, 66, 75, 66, 75, 167, 153, 36, 22, 234, 16, 90, 83, 90, 83, 59, 140, 47, 52, 95, 224, 233, 234, 227, 225, 231, 136, 235, 70, 80, 89, 215, 36, 22, 57, 45, 36, 45, 36, 10, 34, 159, 240, 82, 237, 228, 231, 238, 236, 234, 133, 237, 34, 36, 45, 100, 231, 36, 22, 113, 86, 233, 224, 227, 234, 232, 227, 114, 77, 67, 85, 92, 21, 95, 86, 91, 234, 46, 178, 11, 104, 119, 36, 22, 47, 119, 74, 15, 25, 16, 89, 19, 26, 17, 66, 62, 201, 125, 22, 83, 236, 229, 230, 239, 237, 230, 161, 36, 22, 182, 34, 53, 145, 93, 207, 90, 229, 236, 239, 230, 228, 239, 126, 65, 240, 230, 239, 166, 236, 229, 233, 187, 36, 22, 68, 144, 37, 253, 85, 234, 227, 224, 233, 235, 234, 208, 145, 232, 254, 247, 190, 244, 253, 248, 93, 153, 203, 36, 22, 223, 120, 66, 150, 144, 153, 208, 159, 150, 156, 70, 204, 66, 240, 13, 92, 227, 234, 233, 224, 226, 233, 65, 36, 22, 206, 146, 111, 105, 96, 41, 96, 105, 96, 73, 51, 240, 98, 69, 93, 226, 235, 232, 225, 227, 226, 216, 199, 36, 22, 88, 244, 253, 244, 191, 192, 108, 72, 84, 235, 226, 225, 232, 234, 236, 187, 13, 241, 247, 254, 183, 253, 204, 36, 22, 134, 68, 28, 217, 97, 152, 89, 230, 239, 236, 229, 231, 230, 220, 150, 87, 65, 72, 1, 77, 68, 77, 239, 36, 22, 10, 214, 159, 150, 159, 150, 174, 42, 156, 22, 81, 238, 231, 228, 237, 239, 233, 134, 229, 128, 150, 159, 253, 36, 22, 27, 58, 115, 58, 51, 58, 51, 8, 47, 132, 131, 80, 239, 230, 229, 236, 238, 232, 191, 8, 53, 51, 21, 36, 22, 159, 195, 79, 8, 30, 23, 94, 20, 29, 23, 94, 146, 195, 107, 166, 88, 231, 238, 237, 228, 230, 231, 93, 36, 22, 51, 102, 11, 82, 237, 228, 231, 238, 236, 234, 133, 230, 157, 139, 130, 203, 129, 136, 129, 136, 244, 211, 101, 36, 22, 218, 112, 58, 51, 58, 51, 3, 21, 223, 203, 92, 227, 234, 233, 224, 226, 228, 179, 7, 38, 48, 57, 33], "type": "Buffer"},
{"data": [36, 22, 231, 195, 202, 183, 221, 123, 75, 95, 224, 233, 234, 227, 225, 231, 136, 235, 207, 201, 192, 137, 195, 202, 166, 36, 22, 243, 233, 61, 94, 225, 232, 235, 226, 224, 235, 122, 64, 184, 174, 167, 238, 167, 174, 175, 105, 214, 35, 45, 36, 22, 11, 179, 250, 176, 185, 176, 185, 209, 100, 218, 132, 81, 238, 231, 228, 237, 239, 233, 190, 5, 188, 186, 95, 36, 22, 252, 44, 37, 108, 37, 44, 37, 44, 37, 51, 138, 165, 94, 225, 232, 235, 226, 224, 230, 137, 225, 42, 106, 36, 22, 168, 22, 31, 22, 209, 240, 71, 97, 91, 228, 237, 238, 231, 229, 227, 140, 238, 16, 22, 31, 86, 31, 147, 36, 22, 225, 95, 224, 233, 234, 227, 225, 234, 123, 64, 177, 183, 190, 247, 179, 186, 176, 219, 84, 211, 20, 221, 195, 36, 22, 118, 115, 210, 138, 69, 119, 86, 233, 224, 227, 234, 232, 227, 114, 67, 148, 130, 139, 194, 139, 130, 133, 156, 36, 22, 108, 157, 148, 93, 110, 103, 110, 103], "type": "Buffer"}];

// d36 and d22 is a maker that shows the initial of a reading
const firstMarker = 36;
const secondMarker = 22;
const sizeOfMessage = 25;
const decodeArray = new Uint8Array([7, 10, 13, 15, 3, 6, 11, 4, 14, 0, 1, 9, 5, 8, 12, 2])

const splitArrayBuffer = (buffer, max) => {
  buffer = buffer.reduce((column, item, index) => {
    const line = Math.floor(index / max);
    column[line] = [...(column[line] || []), item];
    return column;
  }, []).filter((item) => {
    if (item.length === 25) {
      return item;
    }
  });

  return buffer
};

const cleanArrayBuffer = (data) => {
  while(data[0] !== firstMarker) {
    if (data[0] === secondMarker) {
      data.unshift(firstMarker);
      break;
    }
    data.shift();
  }
  data = splitArrayBuffer(data, sizeOfMessage);

  return data;
}

const decode = (message) => {
  const decodedArray = new Uint8Array(message.length);
  let startIndex = message[0] & "0x0F";
  let encyKey = ((message[0] & "0xF0") >> 4);

  for(let i in message) {
    const byteTmp = (message[startIndex] ^ encyKey);
    decodedArray[i] = ((byteTmp & "0xF0") | decodeArray[byteTmp & "0x0F"]);
    encyKey = message[startIndex];

    if (++startIndex >= message.length) startIndex = 1;
  }

  
}



buffers.forEach(({ data }) => {
  buffer = cleanArrayBuffer(data);

  for(message of buffer) {
    message.pop()
    message.shift();
    message.shift();

    message = new Uint8Array(message);

    decode(message);

    //console.log(message.toString());
  }

  //console.log(buffer);
});